Traceback (most recent call last):
  File "/Users/patrickkavanagh/anaconda3/anaconda3/envs/jwst7.6/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/patrickkavanagh/anaconda3/anaconda3/envs/jwst7.6/lib/python3.8/site-packages/nbclient/client.py", line 1082, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/patrickkavanagh/anaconda3/anaconda3/envs/jwst7.6/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/patrickkavanagh/anaconda3/anaconda3/envs/jwst7.6/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/Users/patrickkavanagh/anaconda3/anaconda3/envs/jwst7.6/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/Users/patrickkavanagh/anaconda3/anaconda3/envs/jwst7.6/lib/python3.8/site-packages/nbclient/client.py", line 535, in async_execute
    await self.async_execute_cell(
  File "/Users/patrickkavanagh/anaconda3/anaconda3/envs/jwst7.6/lib/python3.8/site-packages/nbclient/client.py", line 827, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/Users/patrickkavanagh/anaconda3/anaconda3/envs/jwst7.6/lib/python3.8/site-packages/nbclient/client.py", line 735, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# load the science and background files to lists
my_science_files = glob.glob('IMA_science/*rate.fits')
my_background_files = glob.glob('IMA_background/*rate.fits')
my_science_files = sorted(my_science_files)

# setup an empty level 2 association structure
asn = asn_from_list(my_science_files, rule=DMSLevel2bBase)
asn.data['products'] = None

# set the association name
asn_name = 'my_galaxy'

# set some metadata
asn['asn_pool'] = asn_name + '_pool'
asn['asn_type'] = 'image2'

for n, sci in enumerate(my_science_files):
    asn.new_product('{}_dither{}'.format(asn_name, str(n+1)))
    sci_member = Member({'expname': sci, 'exptype': 'science'})    
    new_members = asn.current_product['members']
    new_members.append(sci_member)
    
    for bkg in my_background_files:
        bkg_member = Member({'expname': bkg, 'exptype': 'background'})
        new_members.append(bkg_member)
        
# print the association and save to file
name, ser = asn.dump()
print(ser)

asn_file = asn_name + '_lvl2_asn.json'
with open(asn_file, 'w') as f:
    f.write(ser)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-2-fa8f6ef17075>[0m in [0;36m<module>[0;34m[0m
[1;32m     26[0m [0;34m[0m[0m
[1;32m     27[0m [0;31m# print the association and save to file[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 28[0;31m [0mname[0m[0;34m,[0m [0mser[0m [0;34m=[0m [0masn[0m[0;34m.[0m[0mdump[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     29[0m [0mprint[0m[0;34m([0m[0mser[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     30[0m [0;34m[0m[0m

[0;32m~/anaconda3/anaconda3/envs/jwst7.6/lib/python3.8/site-packages/jwst/associations/association.py[0m in [0;36mdump[0;34m(self, format, **kwargs)[0m
[1;32m    233[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    234[0m             raise AssociationNotValidError(
[0;32m--> 235[0;31m                 [0;34m'Association {} is not valid'[0m[0;34m.[0m[0mformat[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    236[0m             )
[1;32m    237[0m [0;34m[0m[0m

[0;32m~/anaconda3/anaconda3/envs/jwst7.6/lib/python3.8/site-packages/jwst/associations/lib/rules_level2_base.py[0m in [0;36m__str__[0;34m(self)[0m
[1;32m    480[0m [0;34m[0m[0m
[1;32m    481[0m         [0;31m# Products of the assocation[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 482[0;31m         [0;32mfor[0m [0mproduct[0m [0;32min[0m [0mself[0m[0;34m.[0m[0mdata[0m[0;34m[[0m[0;34m'products'[0m[0;34m][0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    483[0m             result.append(
[1;32m    484[0m                 '\t{} with {} members'.format(

[0;31mTypeError[0m: 'NoneType' object is not iterable
TypeError: 'NoneType' object is not iterable

